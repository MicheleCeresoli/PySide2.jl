var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"PySide2.QtCore.QPoint\nPySide2.QtCore.QSize\nPySide2.QtCore.QLine\nPySide2.QtCore.QMargins\nPySide2.QtCore.QRect","category":"page"},{"location":"#PySide2.QtCore.QPoint","page":"Home","title":"PySide2.QtCore.QPoint","text":"QPoint\n\nType that defines a point in the plane using integer precision. It is the  representation of PySide.QtCore.QPoint. A point is specified by its x and y coordinates.\n\nFields\n\nxpos – Object x-position \nypos – Object y-position\n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtCore.QSize","page":"Home","title":"PySide2.QtCore.QSize","text":"QSize \n\nType that defines the size of a two-dimensional object using integer  point precision. It is the representation of PySide2.QtCore.QSize. QSize types can be summed, subtracted or tested for equality. \n\nFields\n\nwidth  – Object width \nheight – Object height \n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtCore.QLine","page":"Home","title":"PySide2.QtCore.QLine","text":"QLine\n\nType that provides a two-dimensional vector using integer precision. It is the  representation of PySide.QtCore.QLine. It describes a finite length line on a  two-dimensional surface. The start and end points of the line are specified  using integer point accuracy for coordinates. Use the QlineF constructor to  retrieve a floating point copy.\n\nFields\n\nx1 – initial point x-coordinate\ny1 – initial point y-coordinate\nx2 – final point x-coordinate\ny2 – final point y-coordinate\n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtCore.QMargins","page":"Home","title":"PySide2.QtCore.QMargins","text":"QMargins\n\nType that defines the four margins of a rectangle. It is the representation of  PySide.QtCore.QMargins. Thse margins describe the size of the borders  surrounding a rectangle. \n\nFields\n\nleft   – left margin\nright  – right margin\ntop    – top margin\nbottom – bottom margin\n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtCore.QRect","page":"Home","title":"PySide2.QtCore.QRect","text":"QRect\n\nType that defines a rectangle in the plane using integer precision. It is the  representation of PySide.QtCore.QRect. A rectangle is normally expressed as a  top-left corner and a size. The size (width and height) of a QRect is always  equivalent to the mathematical rectangle that forms the basis for its rendering. \n\nA QRect can be constructed with a set of left, top, width and height integers,  or from a QPoint and a QSize. \n\nFields\n\ntop    – Object x-position \nleft   – Object y-position\nwidth  – Rectangle width\nheight – Rectangle height\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"PySide2.QtWidgets.QWidget\nPySide2.QtWidgets.QMainWindow\nPySide2.QtWidgets.QLabel\nPySide2.QtWidgets.set_window_title!","category":"page"},{"location":"#PySide2.QtWidgets.QWidget","page":"Home","title":"PySide2.QtWidgets.QWidget","text":"QWidget\n\nAbstract type interface for the QWidget base class. QWidget is the atom of  the user interface: it receives mouse, keyboard and other events from the window  system, and paints a representation of itself on the screen. Every widget is  rectangular, and they are sorted in a Z-order. A widget is clipped by its parent  and by the widget in front of it.\n\nNotes\n\nFor a compact Julia interface, each concrete subtype of QWidget has to inherit  the Python class object in a field named obj. \n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtWidgets.QMainWindow","page":"Home","title":"PySide2.QtWidgets.QMainWindow","text":"QWindow <: QWidget \n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtWidgets.QLabel","page":"Home","title":"PySide2.QtWidgets.QLabel","text":"QLabel\n\nThe QLabel widget provides a text or image display. It is the julia interface  to the PySide2.QtWidgets.QLabel class. No user interaction functionality is  provided. The visual appearance of the label can be configured in various ways, and  it can be used for specifying a focus mnemonic key for another widget. \n\n\n\n\n\n","category":"type"},{"location":"#PySide2.QtWidgets.set_window_title!","page":"Home","title":"PySide2.QtWidgets.set_window_title!","text":"set_window_title!(qw::QWidget, title::String)\n\nUpdate the window title (caption). \n\nInput\n\nqw    – Concrete subtype of QWidget that is to be updated. \ntitle – New title string. \n\nNotes\n\nThe title property and so this function only make sense for top-level widgets,  such as windows and dialogs. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"PySide2.QtWebEngineWidgets.QWebEngineView","category":"page"},{"location":"#PySide2.QtWebEngineWidgets.QWebEngineView","page":"Home","title":"PySide2.QtWebEngineWidgets.QWebEngineView","text":"QWebEngineView\n\nThis type is a julia interface for the QWebEngineView class, which provides a  widget that is used to view and edit web documents. A web view is the main widget  component of the Qt WebEngine web browsing module. It can be used in various  applications to display web content live from the Internet.  \n\n\n\n\n\n","category":"type"}]
}
